/**
 * Google Gemini API Client for The Dark Carnival
 * Provides creative content generation with generous free tier
 */

export interface GeminiRequest {
  contents: Array<{
    parts: Array<{
      text: string;
    }>;
  }>;
  generationConfig?: {
    temperature?: number;
    topK?: number;
    topP?: number;
    maxOutputTokens?: number;
    stopSequences?: string[];
  };
  safetySettings?: Array<{
    category: string;
    threshold: string;
  }>;
}

export interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
      role: string;
    };
    finishReason: string;
    index: number;
    safetyRatings: Array<{
      category: string;
      probability: string;
    }>;
  }>;
  promptFeedback?: {
    safetyRatings: Array<{
      category: string;
      probability: string;
    }>;
  };
}

export class GeminiClient {
  private apiKey: string;
  private endpoint = 'https://generativelanguage.googleapis.com/v1beta/models';
  private model = 'gemini-1.5-pro-latest'; // Best free model
  private retryCount = 0;
  private maxRetries = 3;

  constructor() {
    this.apiKey = import.meta.env.VITE_GEMINI_API_KEY || '';
    if (!this.apiKey) {
      console.warn('No Gemini API key found. Gemini features will be unavailable.');
    }
  }

  /**
   * Generate content using Gemini
   */
  async generateContent(
    prompt: string,
    systemPrompt?: string,
    temperature: number = 0.8,
    maxTokens: number = 2000
  ): Promise<string> {
    if (!this.apiKey) {
      throw new Error('No Gemini API key found. Please set VITE_GEMINI_API_KEY in your environment.');
    }

    const fullPrompt = systemPrompt 
      ? `${systemPrompt}\n\nUser Request: ${prompt}`
      : prompt;

    const request: GeminiRequest = {
      contents: [
        {
          parts: [
            {
              text: fullPrompt
            }
          ]
        }
      ],
      generationConfig: {
        temperature,
        maxOutputTokens: maxTokens,
        topK: 40,
        topP: 0.95
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_MEDIUM_AND_ABOVE"
        }
      ]
    };

    try {
      const response = await fetch(`${this.endpoint}/${this.model}:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(request)
      });

      if (!response.ok) {
        const error = await response.text();
        throw new Error(`Gemini API Error: ${response.status} ${error}`);
      }

      const data: GeminiResponse = await response.json();

      if (!data.candidates || data.candidates.length === 0) {
        throw new Error('No response generated by Gemini');
      }

      const candidate = data.candidates[0];
      if (candidate.finishReason === 'SAFETY') {
        throw new Error('Content was blocked by Gemini safety filters');
      }

      const textContent = candidate.content.parts
        .map(part => part.text)
        .join('');

      return textContent;

    } catch (error) {
      if (this.retryCount < this.maxRetries) {
        this.retryCount++;
        console.warn(`Gemini API request failed, retrying (${this.retryCount}/${this.maxRetries})...`);
        await new Promise(resolve => setTimeout(resolve, 1000 * this.retryCount));
        return this.generateContent(prompt, systemPrompt, temperature, maxTokens);
      }

      this.retryCount = 0;
      throw error;
    }
  }

  /**
   * Generate mystical astrological content
   */
  async generateAstrologicalReading(
    userDetails: any,
    starChart: any,
    cosmicEvents: string
  ): Promise<string> {
    const systemPrompt = `
      You are Madame Nebula, a mystical astrologer at The Dark Carnival.
      Create deeply personal astrological readings with a mystical, slightly ominous tone.
      You have access to real astronomical data and current cosmic events.
      
      Focus on:
      - Specific planetary positions and their meanings
      - Current cosmic events and their personal impact
      - Mystical interpretations with carnival imagery
      - Practical guidance with an otherworldly perspective
      
      Use rich, poetic language that feels both ancient and contemporary.
    `;

    const prompt = `
      Create a detailed astrological reading for ${userDetails.name}:
      
      Birth Details:
      - Date: ${userDetails.birthDate}
      - Time: ${userDetails.birthTime}
      - Location: ${userDetails.birthLocation}
      
      Astronomical Data:
      ${JSON.stringify(starChart, null, 2)}
      
      Current Cosmic Events:
      ${cosmicEvents}
      
      Provide a comprehensive reading that weaves together their chart with current celestial happenings.
    `;

    return this.generateContent(prompt, systemPrompt, 0.8, 2500);
  }

  /**
   * Generate enhanced tarot interpretations
   */
  async generateTarotReading(
    cards: any[],
    spread: string,
    question: string,
    cosmicContext: string
  ): Promise<string> {
    const systemPrompt = `
      You are a master tarot reader at The Dark Carnival with access to cosmic knowledge.
      Interpret tarot cards with deep insight, weaving in current cosmic energies.
      Your readings are mystical yet practical, ominous yet hopeful.
      
      Consider:
      - Traditional card meanings
      - Card positions in the spread
      - Current cosmic influences
      - The questioner's energy and intent
      
      Speak with the authority of ancient wisdom and carnival mystique.
    `;

    const prompt = `
      Interpret this tarot reading:
      
      Question: ${question}
      Spread: ${spread}
      Cards: ${cards.map(c => `${c.name} (${c.orientation}) in ${c.position}`).join(', ')}
      
      Current Cosmic Context:
      ${cosmicContext}
      
      Provide a detailed interpretation that connects the cards to current cosmic energies.
    `;

    return this.generateContent(prompt, systemPrompt, 0.9, 2000);
  }

  /**
   * Generate future visions
   */
  async generateFortuneTelling(
    userDetails: any,
    futureTrends: string,
    astrologicalForecasts: any
  ): Promise<string> {
    const systemPrompt = `
      You are The Great Zohar, oracle of The Dark Carnival.
      You see the threads of fate that connect present actions to future outcomes.
      Your visions blend mystical insight with emerging real-world trends.
      
      Create vivid, atmospheric visions that feel both otherworldly and plausible.
      Reference specific future time periods and cosmic timing.
      Speak in riddles and metaphors that reveal profound truths.
    `;

    const prompt = `
      Generate mystical visions for ${userDetails.name}:
      
      Personal Details:
      ${JSON.stringify(userDetails, null, 2)}
      
      Emerging World Trends:
      ${futureTrends}
      
      Future Astrological Events:
      ${JSON.stringify(astrologicalForecasts, null, 2)}
      
      Create two visions: one main path and one alternative timeline.
    `;

    return this.generateContent(prompt, systemPrompt, 0.9, 2500);
  }

  /**
   * Generate death predictions with cosmic timing
   */
  async generateDeathPrediction(
    userData: any,
    statisticalData: string,
    challengingTransits: any
  ): Promise<string> {
    const systemPrompt = `
      You are Mortimer, the Digital Necromancer of The Dark Carnival.
      You combine actuarial precision with cosmic timing to reveal mortality patterns.
      Your predictions are unsettling yet strangely comforting, technological yet mystical.
      
      Reference specific statistical probabilities and astrological danger periods.
      Speak with the cold precision of algorithms touched by otherworldly knowledge.
      Provide bizarre but memorable advice for avoiding predicted fates.
    `;

    const prompt = `
      Generate a death prediction for:
      ${JSON.stringify(userData, null, 2)}
      
      Statistical Life Expectancy Data:
      ${statisticalData}
      
      Challenging Astrological Transits:
      ${JSON.stringify(challengingTransits, null, 2)}
      
      Create a detailed prediction with timing, circumstances, and avoidance strategies.
    `;

    return this.generateContent(prompt, systemPrompt, 0.7, 1500);
  }

  /**
   * Test API connection
   */
  async testConnection(): Promise<boolean> {
    if (!this.apiKey) {
      return false;
    }

    try {
      const response = await this.generateContent("Hello, please respond with 'Connection successful'");
      return response.toLowerCase().includes('connection successful');
    } catch (error) {
      console.error('Gemini connection test failed:', error);
      return false;
    }
  }

  /**
   * Get model capabilities
   */
  getCapabilities(): any {
    return {
      provider: 'Gemini',
      model: this.model,
      strengths: ['Creative writing', 'Long-form content', 'Multimodal understanding'],
      limits: {
        requestsPerMinute: 15,
        requestsPerDay: 1500,
        tokensPerRequest: 32000
      },
      features: ['Text generation', 'Code generation', 'Creative writing', 'Analysis']
    };
  }
}

export default GeminiClient;